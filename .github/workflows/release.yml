name: autobuild

on:
  push:
    branches:
      - 'master'
      - 'dev'
    tags:
      - 'v*'

jobs:
  win64:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: false
          install: git make pkg-config zip mingw-w64-x86_64-gcc mingw-w64-x86_64-ntldd mingw-w64-x86_64-qt5
      - name: git config
        run: git config --global core.autocrlf input
        shell: bash
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: configure (debug)
        run: ./configure --enable-debug
      - name: make (debug)
        run: nproc && make -j$(nproc)
      - name: check executable (debug)
        run: |
          file gui/debug/qpxtool.exe
          file gui/debug/qpxtool.exe | grep -q 'x86-64'
          file gui/debug/qpxtool.exe | grep -q 'for MS Windows'
      - name: configure (release)
        id: conf
        run: |
          git describe --dirty --tags --match 'v*'
          version="$(git describe --dirty --tags --match 'v*')"
          sed -i -re "s/^#define VERSION.*/#define VERSION \"${version:1}-speed47\"/" */*/version.h
          echo "version=${version:1}" >> $GITHUB_OUTPUT
          make clean && ./configure
      - name: make (release)
        run: nproc && make -j$(nproc)
      - name: check executable (release)
        run: |
          file gui/debug/qpxtool.exe
          file gui/debug/qpxtool.exe | grep -q 'x86-64'
          file gui/debug/qpxtool.exe | grep -q 'for MS Windows'
      - name: prepare dist
        id: dist
        run: ./.github/workflows/make-dist.sh ${{ steps.conf.outputs.version }}
      - name: Tag if needed
        id: tag
        if: github.ref_type == 'branch'
        run: |
          case "$GITHUB_REF_NAME" in
            dev)    tagname=devel
                    git tag -f $tagname
                    git push -f origin $tagname
                    echo "draft=true" >> $GITHUB_OUTPUT
                    echo "relname=Dev Build" >> $GITHUB_OUTPUT
                    ;;
            master) tagname=latest
                    git tag -f $tagname
                    git push -f origin $tagname
                    echo "draft=false" >> $GITHUB_OUTPUT
                    echo "relname=Continuous Build" >> $GITHUB_OUTPUT
                    ;;
            v*)     tagname=$GITHUB_REF_NAME
                    echo "draft=false" >> $GITHUB_OUTPUT
                    echo "relname=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
                    ;;
            *)      exit 1;;
          esac
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "tagname=$tagname" >> $GITHUB_OUTPUT
      - name: Delete old assets
        if: github.ref_type == 'branch'
        uses: mknejp/delete-release-assets@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "refs/tags/${{ steps.tag.outputs.tagname }}"
          fail-if-no-assets: false
          assets: |
            qpxtool-*.zip
      - name: Upload new assets
        uses: softprops/action-gh-release@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: "${{ steps.tag.outputs.prerelease }}"
          draft: "${{ steps.tag.outputs.draft }}"
          name: "${{ steps.tag.outputs.relname }}"
          tag_name: "${{ steps.tag.outputs.tagname }}"
          files: ${{ steps.dist.outputs.archive }}

  linux64-appimage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: install prerequisites on host
        run: sudo apt-get update && sudo apt-get install -y fuse
      - name: docker
        run: |
          mkdir -p /tmp/dist
          docker run --device /dev/fuse --privileged --name uu -d -v $PWD:/qpxtool -v /tmp/dist:/dist ubuntu:18.04 sleep 1800
      - name: install prerequisites in docker
        run: docker exec uu sh -c 'apt-get update && apt-get install -y fuse qt5-default qtbase5-dev binutils g++ file qttools5-dev-tools make pkg-config'
      - name: configure
        id: conf
        run: |
          git describe --dirty --tags --match 'v*'
          version="$(git describe --dirty --tags --match 'v*')"
          sed -i -re "s/^#define VERSION.*/#define VERSION \"${version:1}-speed47\"/" */*/version.h
          echo "version=${version:1}" >> $GITHUB_OUTPUT
          docker exec uu sh -c 'cd /qpxtool && ./configure --prefix=/usr'
      - name: make
        run: docker exec uu sh -c 'make -C /qpxtool -j$(nproc)'
      - name: make install
        run: docker exec uu sh -c "make -C /qpxtool install DESTDIR=/dist"
      - name: build appimage in docker
        run: |
          wget -q https://github.com/probonopd/go-appimage/releases/download/continuous/appimagetool-886-x86_64.AppImage
          wget -q https://github.com/probonopd/go-appimage/releases/download/continuous/mkappimage-886-x86_64.AppImage
          chmod +x *.AppImage
          cp /tmp/dist/usr/share/pixmaps/qpxtool.png /tmp/dist
          docker exec -e ARCH=x86_64 -e ME=$UID -e VERSION=v"${{ steps.conf.outputs.version }}" uu sh -c '
            cd /qpxtool && \
            PREFIX=/dist ./appimagetool*.AppImage deploy /dist/usr/share/applications/qpxtool.desktop && \
            cp contrib/AppRun /dist/AppRun && \
            chmod +x /dist/AppRun && \
            find /dist -type f -name "ld-linux*.so*" -delete && \
            ./mkappimage*.AppImage -n /dist && \
            chown $ME QPx*.AppImage
          '
      - name: get appimage name
        id: dist
        run: |
          archive=$(find . -type f -name "QPx*.AppImage")
          echo "archive=$archive" >> $GITHUB_OUTPUT
          echo "appimage is <$archive>"
      - name: Tag if needed
        id: tag
        if: github.ref_type == 'branch'
        run: |
          case "$GITHUB_REF_NAME" in
            dev)    tagname=devel
                    git tag -f $tagname
                    git push -f origin $tagname
                    echo "draft=true" >> $GITHUB_OUTPUT
                    echo "relname=Dev Build" >> $GITHUB_OUTPUT
                    ;;
            master) tagname=latest
                    git tag -f $tagname
                    git push -f origin $tagname
                    echo "draft=false" >> $GITHUB_OUTPUT
                    echo "relname=Continuous Build'" >> $GITHUB_OUTPUT
                    ;;
            v*)     tagname=$GITHUB_REF_NAME
                    echo "draft=false" >> $GITHUB_OUTPUT
                    echo "relname=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
                    ;;
            *)      exit 1;;
          esac
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "tagname=$tagname" >> $GITHUB_OUTPUT
      - name: Delete old assets
        if: github.ref_type == 'branch'
        uses: mknejp/delete-release-assets@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "refs/tags/${{ steps.tag.outputs.tagname }}"
          fail-if-no-assets: false
          assets: |
            QPxTool-*.AppImage
      - name: Upload new assets
        uses: softprops/action-gh-release@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: "${{ steps.tag.outputs.prerelease }}"
          draft: "${{ steps.tag.outputs.draft }}"
          name: "${{ steps.tag.outputs.relname }}"
          tag_name: "${{ steps.tag.outputs.tagname }}"
          files: ${{ steps.dist.outputs.archive }}
